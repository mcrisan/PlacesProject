<?php

namespace Bundle\PlacesBundle\Entities\Repository;

use Doctrine\ORM\EntityRepository;
use Bundle\PlacesBundle\Entities\PlaceRatings;
/**
 * PlaceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PlaceRatingsRepository extends EntityRepository
{
    // Get current rating
    public function getPlaceUserRating($placeId){
        $qb = $this->createQueryBuilder('ratings')
                ->select('ratings')
                ->where('ratings.placeId = :placeId')
                ->setParameter('placeId', $placeId);
        
        return $qb->getQuery()->getResult();
    }
    // Insert new rating
    public function insertRating($placeId,$vote,$em){
        $placeRating = new PlaceRatings();
        $placeRating->setPlaceId($placeId);
        $placeRating->setTotalVotes($vote);
        $placeRating->setVotesCount(1);
        
        $em->persist($placeRating);
        $em->flush();   
    }
    // Update place rating
    public function updatePlaceRating($placeId,$vote,$votesTotal,$count,$incValue){
        $qb = $this->createQueryBuilder('')
                ->update('Bundle\PlacesBundle\Entities\PlaceRatings', 'ratings')
                ->set('ratings.totalVotes', ':total_votes')
                ->set('ratings.votesCount', ':votes_count')
                ->where('ratings.placeId = :id')
                ->setParameter('id', $placeId)
                ->setParameter('total_votes',$vote+$votesTotal)
                ->setParameter('votes_count',$count+$incValue);

        return $qb->getQuery()->execute();
    }
    // house keeping
    public function getCurrentCounts($placeId){
        $qb = $this->createQueryBuilder('ratings')
                ->select('ratings.votesCount')
                ->where('ratings.placeId = :placeId')
                ->setParameter('placeId', $placeId);
        
        return $qb->getQuery()->getResult();  
    }
     public function getCurrentVotes($placeId){
        $qb = $this->createQueryBuilder('ratings')
                ->select('ratings.totalVotes')
                ->where('ratings.placeId = :placeId')
                ->setParameter('placeId', $placeId);
        
        return $qb->getQuery()->getResult();  
    }
    // Get place for #1 page (highest rating)
    function getPlaceMaxRating() {
        $qb = $this->createQueryBuilder('ratings')
                ->select('ratings.placeId, ratings.totalVotes/ratings.votesCount as rating')
                ->orderBy('rating','DESC')
                ->setMaxResults(1);
        return $qb->getQuery()->getResult();
        
        /*
        'SELECT pr.place_id a, pr.total_votes / pr.votes_count AS rating, pd.place_name AS name, pd . * 
FROM place_ratings pr, place_details pd
WHERE pr.place_id = pd.place_id
ORDER BY rating DESC '*/
    }
}
